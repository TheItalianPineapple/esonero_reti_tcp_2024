/*
 ============================================================================
 Name        : server.c
 Author      : johnni_gallo
 Version     : 1.0
 Description : Esonero Reti 2024
 ============================================================================
 */


#include <stdio.h>
#include <time.h>
#include <winsock2.h>
#include <stdlib.h>
#include <string.h>
// Include Header
#include "protocol.h"

// Function To Manage Client
void client_handler(SOCKET client_socket) {
    char input[BUFFER];
    char password[BUFFER];
    int bytes_received;

    // Loop
    while (1) {
        // R
        bytes_received = recv(client_socket, input, sizeof(input) - 1, 0);
        if (bytes_received <= 0) {
            printf("Error receiving data or client disconnected.\n");
            break;
        }

        input[bytes_received] = '\0';  // Null-terminate the received string
        printf("Received request: %s\n", input);

        // If the client requested to quit
        if (strcmp(input, "0") == 0) {
            printf("Client Has Quit\n");
            break;
        }

        // Process the password request based on the input
        char type = input[0]; // First character is the password type
        int length = atoi(&input[2]); // Length follows the space

        if (length < 6 || length > 32) {
            printf("Password length must be between 6 and 32 chars.\n");
            strcpy(password, "ERROR");
        } else {
            switch (type) {
                case 'n':
                    generate_numeric(password, length);
                    break;
                case 'a':
                    generate_alpha(password, length);
                    break;
                case 'm':
                    generate_mixed(password, length);
                    break;
                case 's':
                    generate_secure(password, length);
                    break;
                default:
                    printf("Invalid type. Available Types are 'n', 'a', 'm', 's'\n");
                    strcpy(password, "ERROR");
                    break;
            }
        }

        // Send the generated password to the client
        send(client_socket, password, strlen(password), 0);
    }

    // Close the connection to the client
    closesocket(client_socket);
}

int main() {
    WSADATA wsaData;
    SOCKET server_socket, client_socket;
    struct sockaddr_in server_addr, client_addr;
    int client_len;

    // Initialize Winsock
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        printf("WSAStartup failed\n");
        return 1;
    }

    // Create a socket for the server
    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == INVALID_SOCKET) {
        printf("Socket creation failed: %d\n", WSAGetLastError());
        WSACleanup();
        return 1;
    }

    // Setup server address
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = inet_addr(IP_SERVER);  // Use localhost IP (127.0.0.1) for local testing
    server_addr.sin_port = htons(PORT_SERVER);

    // Bind the socket
    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) == SOCKET_ERROR) {
        printf("Bind failed: %d\n", WSAGetLastError());
        closesocket(server_socket);
        WSACleanup();
        return 1;
    }

    // Listen for incoming connections
    if (listen(server_socket, QLEN) < 0	) {
        printf("Listen() failed.");
        closesocket(server_socket);
        WSACleanup();
        return 1;
    }

    printf("Server is listening for connections...\n");

    // Accept incoming connections
    while (1) {
        client_len = sizeof(client_addr);
        client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_len);
        if (client_socket == INVALID_SOCKET) {
            printf("Accept failed: %d\n", WSAGetLastError());
            continue;
        }

        printf("New connection from %s:%d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));

        // Handle the client in a separate function
        client_handler(client_socket);
    }

    // Cleanup and close the server socket
    closesocket(server_socket);
    WSACleanup();
    return 0;
}

// Function to generate a numeric password
void generate_numeric(char *password, int length) {
    const char digits[] = "0123456789";
    for (int i = 0; i < length; i++) {
        password[i] = digits[rand() % 10];  // Randomly pick a digit
    }
    password[length] = '\0';  // Null-terminate the string
}

// Function to generate an alphabetic password (lowercase only)
void generate_alpha(char *password, int length) {
    const char alphabet[] = "abcdefghijklmnopqrstuvwxyz";
    for (int i = 0; i < length; i++) {
        password[i] = alphabet[rand() % 26];  // Randomly pick a letter
    }
    password[length] = '\0';  // Null-terminate the string
}

// Function to generate a mixed password (letters and numbers)
void generate_mixed(char *password, int length) {
    const char alpha_numeric[] = "abcdefghijklmnopqrstuvwxyz0123456789";
    for (int i = 0; i < length; i++) {
        password[i] = alpha_numeric[rand() % 36];  // Randomly pick a letter or number
    }
    password[length] = '\0';  // Null-terminate the string
}

// Function to generate a secure password (letters, numbers, and symbols)
void generate_secure(char *password, int length) {
    const char secure_set[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_-+=<>?/";
    for (int i = 0; i < length; i++) {
        password[i] = secure_set[rand() % 72];  // Randomly pick a character from the secure set
    }
    password[length] = '\0';  // Null-terminate the string
}

